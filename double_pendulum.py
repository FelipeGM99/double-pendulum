# -*- coding: utf-8 -*-
"""PenduloDoble.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZqBKRWLkZgwMPhcy4Ik83ODIgicwQymC
"""

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.gridspec as gridspec

# ---Physical parameters---
g = 9.81
l1 = 1.1
l2 = 1.2
m1 = 1
m2 = 1

# ---Model---
def sistem(t, y):
    theta1, dot_theta1, theta2, dot_theta2 = y

    # Ax=b
    A = np.array([[l1*(m1+m2), m2*l2*np.cos(theta1-theta2)], [l1*np.cos(theta1-theta2), l2]])
    b = np.array([-m2*l2*(dot_theta2**2)*np.sin(theta1-theta2)-(m1+m2)*g*np.sin(theta1), l1*(dot_theta1**2)*np.sin(theta1-theta2)-g*np.sin(theta2)])

    # Solve for the accelerations
    ddot_theta = np.linalg.solve(A, b)
    return [dot_theta1, ddot_theta[0], dot_theta2, ddot_theta[1]]

# ---IVP---
# Initial values
theta1_0 = np.deg2rad(45)
theta2_0 = np.deg2rad(44.9)
dot_theta1_0 = 0
dot_theta2_0 = 0

# Initial vector state
y0 = [theta1_0, dot_theta1_0, theta2_0, dot_theta2_0]

# Solve for the velocities
sol = solve_ivp(sistem, [0, 300], y0, t_eval=np.linspace(0,300,10000), method='RK45')

theta1 = sol.y[0]
dot_theta1 = sol.y[1]
theta2 = sol.y[2]
dot_theta2 = sol.y[3]

def simulation(theta1, theta2):
  x1 = l1 * np.sin(theta1)
  y1 = -l1 * np.cos(theta1)
  x2 = x1 + l2 * np.sin(theta2)
  y2 = y1 - l2 * np.cos(theta2)
  return (x1, y1, x2, y2)

fig = plt.figure()
ax = fig.add_subplot(aspect='equal')
ax.set_xlim(-2, 2)
ax.set_ylim(-2.5, 0.25)
ax.grid()

x1_0, y1_0, x2_0, y2_0 = simulation(theta1[0], theta2[0])
line0, = ax.plot([-0.25, 0.25], [0, 0], lw=4, c='k')
line1, = ax.plot([0, x1_0], [0, y1_0], lw=2, c='k')
circle1 = ax.add_patch(plt.Circle((x1_0, y1_0), 0.05, fc='r', zorder=3))
line2, = ax.plot([x1_0, x2_0], [y1_0, y2_0], lw=2, c='k')
circle2 = ax.add_patch(plt.Circle((x2_0, y2_0), 0.1, fc='b', zorder=3))

def animate(i):
  x1, y1, x2, y2 = simulation(theta1[i], theta2[i])
  line1.set_data([0, x1],[0, y1])
  circle1.set_center((x1, y1))
  line2.set_data([x1, x2],[y1, y2])
  circle2.set_center((x2, y2))

ani = animation.FuncAnimation(fig, animate, frames=len(sol.t))
ffmmeg_writer = animation.FFMpegWriter(fps=30)
ani.save('pendulo.mp4', writer=ffmmeg_writer)
plt.show()

fig = plt.figure(figsize=(10, 8))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax3 = fig.add_subplot(223)
ax4 = fig.add_subplot(224)

ax1.plot(sol.t, np.rad2deg(theta1), 'b', lw=1, label=r'$\theta_1$')
ax1.plot(sol.t, np.rad2deg(theta2), 'g', lw=1, label=r'$\theta_2$')
ax1.set_title('Angle vs Time')
ax1.set_xlabel('Tiempo [s]')
ax1.set_ylabel(r'$\theta$ [°]')
ax1.set_xlim(0, 20)
ax1.legend()
ax1.grid()

ax2.plot(sol.t, np.rad2deg(dot_theta1), 'b', lw=1, label=r'$\theta_1$')
ax2.plot(sol.t, np.rad2deg(dot_theta2), 'g', lw=1, label=r'$\theta_2$')
ax2.set_title('Angular velocity vs Time')
ax2.set_xlabel('Tiempo [s]')
ax2.set_ylabel(r'$\dot \theta$ [°/s]')
ax2.set_xlim(0, 20)
ax2.legend()
ax2.grid()

ax3.plot(np.rad2deg(theta1), np.rad2deg(dot_theta1), 'darkblue', lw=0.05, label=r'$\theta_1$')
ax3.plot(np.rad2deg(theta2), np.rad2deg(dot_theta2), 'green', lw=0.05, label=r'$\theta_2$')
ax3.set_title('Phase diagram')
ax3.set_xlabel(r'$\theta$ [°]')
ax3.set_ylabel(r'$\dot \theta$ [°/s]')
ax3.legend()

ax4.plot(np.rad2deg(theta1), np.rad2deg(theta2), 'darkblue', lw=0.05)
#ax4.plot(np.rad2deg(dot_theta1), np.rad2deg(dot_theta2), 'green', lw=0.05)
ax4.set_title('Lissajous curve')
ax4.set_xlabel(r'$\theta_{1}$ [°]')
ax4.set_ylabel(r'$\theta_{2}$ [°]')

plt.tight_layout()
plt.show()

